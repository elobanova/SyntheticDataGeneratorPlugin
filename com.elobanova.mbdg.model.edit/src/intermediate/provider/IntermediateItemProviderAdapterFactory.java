/**
 */
package intermediate.provider;

import intermediate.util.IntermediateAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IntermediateItemProviderAdapterFactory extends IntermediateAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IntermediateItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.GeneratorAttributeElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneratorAttributeElementItemProvider generatorAttributeElementItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.GeneratorAttributeElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneratorAttributeElementAdapter() {
		if (generatorAttributeElementItemProvider == null) {
			generatorAttributeElementItemProvider = new GeneratorAttributeElementItemProvider(this);
		}

		return generatorAttributeElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.GeneratorEntityElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneratorEntityElementItemProvider generatorEntityElementItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.GeneratorEntityElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneratorEntityElementAdapter() {
		if (generatorEntityElementItemProvider == null) {
			generatorEntityElementItemProvider = new GeneratorEntityElementItemProvider(this);
		}

		return generatorEntityElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.EntitiesContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntitiesContainerItemProvider entitiesContainerItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.EntitiesContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntitiesContainerAdapter() {
		if (entitiesContainerItemProvider == null) {
			entitiesContainerItemProvider = new EntitiesContainerItemProvider(this);
		}

		return entitiesContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.ModelRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelRootItemProvider modelRootItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.ModelRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelRootAdapter() {
		if (modelRootItemProvider == null) {
			modelRootItemProvider = new ModelRootItemProvider(this);
		}

		return modelRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.TemplateAttributesContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateAttributesContainerItemProvider templateAttributesContainerItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.TemplateAttributesContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateAttributesContainerAdapter() {
		if (templateAttributesContainerItemProvider == null) {
			templateAttributesContainerItemProvider = new TemplateAttributesContainerItemProvider(this);
		}

		return templateAttributesContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.TemplateAttributeElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateAttributeElementItemProvider templateAttributeElementItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.TemplateAttributeElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateAttributeElementAdapter() {
		if (templateAttributeElementItemProvider == null) {
			templateAttributeElementItemProvider = new TemplateAttributeElementItemProvider(this);
		}

		return templateAttributeElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.IdNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdNodeItemProvider idNodeItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.IdNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdNodeAdapter() {
		if (idNodeItemProvider == null) {
			idNodeItemProvider = new IdNodeItemProvider(this);
		}

		return idNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intermediate.GeneratorReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneratorReferenceItemProvider generatorReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link intermediate.GeneratorReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneratorReferenceAdapter() {
		if (generatorReferenceItemProvider == null) {
			generatorReferenceItemProvider = new GeneratorReferenceItemProvider(this);
		}

		return generatorReferenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (generatorAttributeElementItemProvider != null) generatorAttributeElementItemProvider.dispose();
		if (generatorEntityElementItemProvider != null) generatorEntityElementItemProvider.dispose();
		if (entitiesContainerItemProvider != null) entitiesContainerItemProvider.dispose();
		if (modelRootItemProvider != null) modelRootItemProvider.dispose();
		if (templateAttributesContainerItemProvider != null) templateAttributesContainerItemProvider.dispose();
		if (templateAttributeElementItemProvider != null) templateAttributeElementItemProvider.dispose();
		if (idNodeItemProvider != null) idNodeItemProvider.dispose();
		if (generatorReferenceItemProvider != null) generatorReferenceItemProvider.dispose();
	}

}
